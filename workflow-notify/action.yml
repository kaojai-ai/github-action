name: "Workflow Notify"
description: "Send a GitHub Action Workflow result to notification provider (e.g. Slack)"
author: "kaojai.ai"

inputs:
  slack_webhook_url:
    description: "Incoming Slack webhook URL"
    required: true
  channel:
    description: "Channel / target"
    required: true
  provider_name:
    description: "Notification provider (slack, ...)"
    required: false
    default: "slack"
  prefix:
    description: "Title prefix (e.g. 📦 Package, 🚀 Deploy, etc.)"
    required: false
    default: "⚙️ Workflow"
  bot_name:
    description: "Bot display name"
    required: false
    default: "kj-ops-bot"
  bot_icon_url:
    description: "Bot avatar URL"
    required: false
    default: "https://avatars.githubusercontent.com/u/227843191"
  message:
    description: "Optional message body in Slack Markdown"
    required: false
  status:
    description: "Optional job status override (success, failure, cancelled, etc.)"
    required: false
    default: ""
  version:
    description: "Optional version override"
    required: false
    default: ""
branding:
  color: "4A154B"
  icon: "hash"
runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ env.TARGET_BRANCH }}
        fetch-depth: 0
        fetch-tags: true

    - name: Compute tags
      id: ver
      shell: bash
      run: |
        BRANCH="${{ env.TARGET_BRANCH }}"
        SHORT_SHA="$(git rev-parse --short HEAD)"
        # if HEAD has a semver tag like v1.2.3, capture it
        HEAD_TAG="$(git tag --points-at HEAD | grep -E '^v[0-9]+' | head -n1 || true)"
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        echo "head_tag=$HEAD_TAG" >> $GITHUB_OUTPUT
        echo "branch=$BRANCH" >> $GITHUB_OUTPUT

    - name: Build Slack payload
      id: build
      shell: bash
      env:
        slack_webhook_url: ${{ inputs.slack_webhook_url }}
        provider_name: ${{ inputs.provider_name }}
        channel: ${{ inputs.channel }}
        prefix: ${{ inputs.prefix }}
        bot_name: ${{ inputs.bot_name }}
        bot_icon_url: ${{ inputs.bot_icon_url }}
        message: ${{ inputs.message }}
        status_input: ${{ inputs.status }}
        override_version: ${{ inputs.version }}
        tag_version: ${{ steps.ver.outputs.head_tag }}
      run: |
        set -euo pipefail

        if [ -z "${slack_webhook_url}" ]; then
          echo "The slack_webhook_url input is required." >&2
          exit 1
        fi

        node <<'NODE'
        const fs = require('fs');
        const path = require('path');

        const workspace = process.env.GITHUB_WORKSPACE || process.cwd();
        const payload_path = path.join(workspace, 'slack_payload.json');

        const job_status = (process.env.status_input || process.env.JOB_STATUS || 'success').toLowerCase();
        const prefix = process.env.prefix || '⚙️ Workflow';
        const provider_name = process.env.provider_name || 'slack';
        const workflow = process.env.GITHUB_WORKFLOW || 'Workflow';
        const repository = process.env.GITHUB_REPOSITORY || '';
        const repository_url = `${process.env.GITHUB_SERVER_URL}/${repository}`;
        const run_id = process.env.GITHUB_RUN_ID || '';
        const server_url = process.env.GITHUB_SERVER_URL || 'https://github.com';
        const run_url = run_id ? `${server_url}/${repository}/actions/runs/${run_id}` : '';
        const ref = process.env.GITHUB_REF_NAME || process.env.GITHUB_REF || '';
        const actor = process.env.GITHUB_ACTOR || '';
        const channel = process.env.channel || 'package';
        const bot_name = process.env.bot_name || 'kj-ops-bot';
        const bot_icon_url = process.env.bot_icon_url || '';
        const message = (process.env.message || '').trim();
        const job_name = process.env.GITHUB_JOB || '';
        const commit_sha = process.env.GITHUB_SHA ? process.env.GITHUB_SHA.substring(0, 7) : '';
        const commit_url = `${server_url}/${repository}/commit/${commit_sha}`;
        const version = process.env.override_version || process.env.tag_version;
        const version_url = `${server_url}/${repository}/releases/tag/${version}`;

        const status_map = {
          success: { emoji: '✅', color: '#2eb67d', label: 'Success' },
          failure: { emoji: '🚨', color: '#e01e5a', label: 'Failure' },
          cancelled: { emoji: '⚠️', color: '#ecb22e', label: 'Cancelled' }
        };

        const status = status_map[job_status] || {
          emoji: 'ℹ️',
          color: '#4a154b',
          label: job_status ? job_status.charAt(0).toUpperCase() + job_status.slice(1) : 'Status Unknown'
        };

        const header_text = `${status.emoji} ${prefix} • ${repository} ${version ? `(${version})` : ''}`;

        const body_message = message || `Built with love 💚 <https://kaojai.ai|KaoJai.ai>`;

        const fields = [
          repository && { type: 'mrkdwn', text: `*Repository:* <${repository_url}|${repository}>` },
          commit_sha && { type: 'mrkdwn', text: `*Commit:* <${commit_url}|${commit_sha}>` },
          { type: 'mrkdwn', text: `*Version:* <${version_url}|${version ? version : '(no tag)'}>` },
          actor && { type: 'mrkdwn', text: `*Actor:* ${actor}` },
          { type: 'mrkdwn', text: `*Status:* ${status.label}` },
          run_url && { type: 'mrkdwn', text: `*Run:* <${run_url}|View ${workflow}>` }
        ].filter(Boolean);

        const blocks = [
          {
            type: 'header',
            text: { type: 'plain_text', text: header_text, emoji: true }
          },
          {
            type: 'section',
            fields
          },
          {
            type: 'section',
            text: { type: 'mrkdwn', text: body_message }
          }
        ];

        const payload = {
          channel,
          username: bot_name,
          icon_url: bot_icon_url,
          text: "",
          attachments: [
            {
              color: status.color,
              blocks
            }
          ]
        };

        fs.writeFileSync(payload_path, JSON.stringify(payload, null, 2));
        NODE

        echo "payload_path=${GITHUB_WORKSPACE}/slack_payload.json" >> "$GITHUB_OUTPUT"
    - name: Send Slack notification
      uses: slackapi/slack-github-action@v1.27.0
      with:
        payload-file-path: ${{ steps.build.outputs.payload_path }}
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slack_webhook_url }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
